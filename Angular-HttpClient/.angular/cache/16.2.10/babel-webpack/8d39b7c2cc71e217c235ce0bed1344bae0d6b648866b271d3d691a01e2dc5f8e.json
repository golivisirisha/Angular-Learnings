{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\DELL\\Downloads\\gh\\OneDrive\\Desktop\\Sails tasks\\Angular-HttpClient\\src\\app\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { HttpClient,HttpHeaders,HttpErrorResponse} from '@angular/common/http';\r\nimport { Component, EventEmitter, OnInit, Output, inject } from '@angular/core';\r\nimport { Task } from 'src/Models/Task';\r\nimport{map} from 'rxjs/operators';\r\nimport { TaskService } from '../Services/task.service';\r\nimport {Subscription}\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.css']\r\n})\r\nexport class DashboardComponent implements OnInit{\r\n  showCreateTaskForm: boolean = false;\r\n  http:HttpClient=inject(HttpClient);\r\n  allTasks:Task[]=[];\r\n  taskService:TaskService=inject(TaskService);\r\n\r\n  editMode:boolean=false;\r\n\r\n  selectedTask:Task;\r\n  currentTaskId:string='';\r\n  isLoading:boolean=false;\r\n  errorMessage:string | null =null;\r\n  errorSub:Subscription;\r\n\r\n\r\n\r\n\r\n  ngOnInit(){\r\n    this.fetchAllTasks();\r\n    this.taskService.errorSubject.subscribe({next:(httpError)=>{\r\n      this.setErrorMessage(httpError);\r\n\r\n    }\r\n\r\n    });\r\n\r\n  }\r\n  \r\n\r\n  OpenCreateTaskForm(){\r\n    this.showCreateTaskForm = true;\r\n    this.editMode=false;\r\n    this.selectedTask={\r\n      title:'',\r\n      desc:'',\r\n      assignedTo:'',\r\n      createdAt:'',\r\n      priority:'',\r\n      status:''\r\n\r\n\r\n    }\r\n  }\r\n\r\n  CloseCreateTaskForm(){\r\n    this.showCreateTaskForm = false;\r\n  }\r\n  CreateOrUpdateTask(data:Task){\r\n    if(!this.editMode)\r\n     this.taskService.CreateTask(data);\r\n    else{\r\n      //task edit\r\n      this.taskService.UpdateTask(this.currentTaskId,data);\r\n    }\r\n\r\n\r\n    // const headers=new HttpHeaders({'my-header':'hello-world'})\r\n  //  this.http.post<{name:string}>('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks.json',data)\r\n  //  .subscribe((response)=>{\r\n  //   console.log(response);\r\n  //   this.fetchAllTasks();\r\n  //  });\r\n\r\n   \r\n\r\n  } \r\n\r\n  FetchAllTaskClicked(){\r\n    this.fetchAllTasks();\r\n\r\n  }\r\n\r\n  private fetchAllTasks(){\r\n    // this.http.get<{[key:string]:Task}>('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks.json')\r\n    // .pipe(map((response)=>{\r\n\r\n    //   //trasforming data\r\n    //   let tasks=[];\r\n\r\n    //   for(let key in response){\r\n    //     if(response.hasOwnProperty(key)){\r\n    //       tasks.push({...response[key],id:key});\r\n\r\n    //     }\r\n       \r\n    //   }\r\n\r\n    //   return tasks;\r\n\r\n    // }))\r\n\r\n    this.isLoading=true;\r\n    this.taskService.GetAlltasks()\r\n    .subscribe({next:(tasks)=>{\r\n      this.allTasks=tasks;\r\n      this.isLoading=false;\r\n      // console.log(tasks);\r\n    },error:(error)=>{\r\n      // this.errorMessage=error.message;\r\n      this.setErrorMessage(error);\r\n      this.isLoading=false;\r\n      \r\n\r\n    }\r\n\r\n    });\r\n\r\n  }\r\n\r\n  private setErrorMessage(err:HttpErrorResponse){\r\n    // console.log(err);\r\n    if(err.error.error==='Permission denied'){\r\n      this.errorMessage='you do not have permission to perform this action';\r\n    }\r\n    else{\r\n      this.errorMessage=err.message;\r\n    }\r\n    setTimeout(()=>{\r\n      this.errorMessage=null;\r\n\r\n    },3000);\r\n\r\n  }\r\n\r\n\r\n\r\n  DeleteTask(id:string | undefined){\r\n    // this.http.delete('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks/'+ id +'.json')\r\n    // .subscribe((res)=>{\r\n    //   this.fetchAllTasks();\r\n    // })\r\n    this.taskService.DeleteTask(id);\r\n\r\n  }\r\n\r\n  DeleteAllTasks(){\r\n    // this.http.delete('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks.json')\r\n    // .subscribe((res)=>{\r\n    //    this.fetchAllTasks();\r\n\r\n    // })\r\n    this.taskService.DeleteAllTask();\r\n  }\r\n  \r\n  OnEditTaskClicked(id:string |undefined){\r\n    this.currentTaskId=id;\r\n    //open edit task form\r\n    this.showCreateTaskForm=true;\r\n    this.editMode=true; \r\n\r\n   this.selectedTask= this.allTasks.find((task)=>{\r\n      return task.id === id;\r\n\r\n    })\r\n\r\n\r\n  }\r\n}\r\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}