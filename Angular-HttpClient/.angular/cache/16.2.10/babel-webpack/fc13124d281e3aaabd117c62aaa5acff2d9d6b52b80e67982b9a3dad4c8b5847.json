{"ast":null,"code":"import { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class TaskService {\n  constructor() {\n    this.http = inject(HttpClient);\n    this.errorSubject = new Subject();\n  }\n  CreateTask(task) {\n    this.http.post('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks.json', task).subscribe({\n      error: err => {\n        this.errorSubject.next();\n      }\n      // this.fetchAllTasks();\n    });\n  }\n\n  DeleteTask(id) {\n    this.http.delete('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks/' + id + '.json').subscribe(res => {\n      //   this.fetchAllTasks();\n    });\n  }\n  DeleteAllTask() {\n    this.http.delete('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks.json').subscribe();\n    //    this.fetchAllTasks();\n  }\n\n  GetAlltasks() {\n    return this.http.get('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks.json').pipe(map(response => {\n      //trasforming data\n      let tasks = [];\n      for (let key in response) {\n        if (response.hasOwnProperty(key)) {\n          tasks.push({\n            ...response[key],\n            id: key\n          });\n        }\n      }\n      return tasks;\n    }));\n  }\n  UpdateTask(id, data) {\n    this.http.put('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks' + id + '.json', data).subscribe();\n  }\n  static #_ = this.ɵfac = function TaskService_Factory(t) {\n    return new (t || TaskService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TaskService,\n    factory: TaskService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["inject","HttpClient","map","Subject","TaskService","constructor","http","errorSubject","CreateTask","task","post","subscribe","error","err","next","DeleteTask","id","delete","res","DeleteAllTask","GetAlltasks","get","pipe","response","tasks","key","hasOwnProperty","push","UpdateTask","data","put","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\DELL\\Downloads\\gh\\OneDrive\\Desktop\\Sails tasks\\Angular-HttpClient\\src\\app\\Services\\task.service.ts"],"sourcesContent":["import {Injectable,inject} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Task } from 'src/Models/Task';\r\nimport {map} from 'rxjs/operators';\r\nimport {Subject} from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class TaskService{\r\n\r\n    http:HttpClient=inject(HttpClient);\r\n    errorSubject=new Subject<HttpErrorResponse>();\r\n\r\n    CreateTask(task:Task){\r\n        this.http.post<{name:string}>('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks.json',task)\r\n   .subscribe({error:(err)=>{\r\n    this.errorSubject.next();\r\n\r\n   }\r\n    // this.fetchAllTasks();\r\n    });\r\n\r\n}\r\n\r\n    DeleteTask(id:string |undefined){\r\n        this.http.delete('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks/'+ id +'.json')\r\n    .subscribe((res)=>{\r\n    //   this.fetchAllTasks();\r\n    \r\n    });\r\n\r\n\r\n\r\n}\r\n\r\n    DeleteAllTask(){\r\n        this.http.delete('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks.json')\r\n        .subscribe();\r\n        //    this.fetchAllTasks();\r\n\r\n    }\r\n\r\n    GetAlltasks(){\r\n       return this.http.get<{[key:string]:Task}>('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks.json')\r\n    .pipe(map((response)=>{\r\n\r\n      //trasforming data\r\n      let tasks=[];\r\n\r\n      for(let key in response){\r\n        if(response.hasOwnProperty(key)){\r\n          tasks.push({...response[key],id:key});\r\n\r\n        }\r\n       \r\n      }\r\n\r\n      return tasks;\r\n\r\n    }))\r\n    \r\n    }\r\n    UpdateTask(id: string | undefined,data:Task){\r\n        this.http.put('https://angular-http-client-360ac-default-rtdb.firebaseio.com/tasks'+id+'.json',data)\r\n        .subscribe();\r\n\r\n    }\r\n    \r\n\r\n}"],"mappings":"AAAA,SAAmBA,MAAM,QAAO,eAAe;AAC/C,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,SAAQC,GAAG,QAAO,gBAAgB;AAClC,SAAQC,OAAO,QAAO,MAAM;;AAM5B,OAAM,MAAOC,WAAW;EAJxBC,YAAA;IAMI,KAAAC,IAAI,GAAYN,MAAM,CAACC,UAAU,CAAC;IAClC,KAAAM,YAAY,GAAC,IAAIJ,OAAO,EAAqB;;EAE7CK,UAAUA,CAACC,IAAS;IAChB,IAAI,CAACH,IAAI,CAACI,IAAI,CAAgB,0EAA0E,EAACD,IAAI,CAAC,CAClHE,SAAS,CAAC;MAACC,KAAK,EAAEC,GAAG,IAAG;QACxB,IAAI,CAACN,YAAY,CAACO,IAAI,EAAE;MAEzB;MACC;KACC,CAAC;EAEN;;EAEIC,UAAUA,CAACC,EAAoB;IAC3B,IAAI,CAACV,IAAI,CAACW,MAAM,CAAC,sEAAsE,GAAED,EAAE,GAAE,OAAO,CAAC,CACxGL,SAAS,CAAEO,GAAG,IAAG;MAClB;IAAA,CAEC,CAAC;EAIN;EAEIC,aAAaA,CAAA;IACT,IAAI,CAACb,IAAI,CAACW,MAAM,CAAC,0EAA0E,CAAC,CAC3FN,SAAS,EAAE;IACZ;EAEJ;;EAEAS,WAAWA,CAAA;IACR,OAAO,IAAI,CAACd,IAAI,CAACe,GAAG,CAAsB,0EAA0E,CAAC,CACvHC,IAAI,CAACpB,GAAG,CAAEqB,QAAQ,IAAG;MAEpB;MACA,IAAIC,KAAK,GAAC,EAAE;MAEZ,KAAI,IAAIC,GAAG,IAAIF,QAAQ,EAAC;QACtB,IAAGA,QAAQ,CAACG,cAAc,CAACD,GAAG,CAAC,EAAC;UAC9BD,KAAK,CAACG,IAAI,CAAC;YAAC,GAAGJ,QAAQ,CAACE,GAAG,CAAC;YAACT,EAAE,EAACS;UAAG,CAAC,CAAC;;;MAMzC,OAAOD,KAAK;IAEd,CAAC,CAAC,CAAC;EAEH;EACAI,UAAUA,CAACZ,EAAsB,EAACa,IAAS;IACvC,IAAI,CAACvB,IAAI,CAACwB,GAAG,CAAC,qEAAqE,GAACd,EAAE,GAAC,OAAO,EAACa,IAAI,CAAC,CACnGlB,SAAS,EAAE;EAEhB;EAAC,QAAAoB,CAAA,G;qBA1DQ3B,WAAW;EAAA;EAAA,QAAA4B,EAAA,G;WAAX5B,WAAW;IAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;IAAAC,UAAA,EAHT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}